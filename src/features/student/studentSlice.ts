import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { create, getAll, getById, update } from "../../api/studentClient";
import { AppThunk, RootState } from "../../app/store";
// import { selectStudent } from "../student/studentSlice";

export const getStudents = createAsyncThunk("student/getAll", async () => {
  const response = await getAll();
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const getStudentsById = createAsyncThunk("student/getById", async (id:number) => {
  const response = await getById(id);
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const createStudent = createAsyncThunk("student/createStudent", async (data:any) => {
  const response = await create(data);
  // The value we return becomes the `fulfilled` action payload
  return response;
});

// export const deleteStudent = createAsyncThunk("student/deleteStudent", async (id:number) => {
//   const response = await delete(id);
//   // The value we return becomes the `fulfilled` action payload
//   return response;
// });


export interface StudentState {
    listStudent: any[];
    loading: boolean,
    error: string,
  }
  const initialState: StudentState = {
    listStudent: [],
    loading: false,
    error: "",
  };
export const studentSlice = createSlice({
  name: "student",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addStudent: (state, action) => {
      state.listStudent.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getStudents.pending, (state) => {
        state.loading = true;
      })
      .addCase(getStudents.fulfilled, (state, action) => {
        state.loading = false;
        state.listStudent=action.payload;
      })
      .addCase(getStudents.rejected, (state, action) => {
        state.loading = false;
        state.error = "call api error";
      })
      .addCase(getStudentsById.pending, (state) => {
        state.loading = true;
      })
      .addCase(getStudentsById.fulfilled, (state, action) => {
        state.loading = false;
        state.listStudent=action.payload;
      })
      .addCase(getStudentsById.rejected, (state) => {
        state.loading = false;
        state.error = "call api error";
      })
      .addCase(createStudent.pending, (state) => {
        state.loading = true;
      })
      .addCase(createStudent.fulfilled, (state, action) => {
        state.loading = false;
        state.listStudent=action.payload;
      })
      .addCase(createStudent.rejected, (state) => {
        state.loading = false;
        state.error = "create student error";
      })
      
  },
});
// export const { incrementStudent } = studentSlice.actions;
export const listStudents = (state: RootState) => state.student.listStudent;
export const loadingStudent = (state: RootState) => state.student.loading;
export const { reducer: studentReducer } = studentSlice;
export default studentSlice.reducer;
export const {addStudent} = studentSlice.actions;
